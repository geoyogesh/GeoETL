version: 2.1

orbs:
  win: circleci/windows@5.0.0

executors:
  rust-executor:
    docker:
      - image: rust:1.90.0
    working_directory: ~/project
    environment:
      CARGO_TERM_COLOR: always
      RUST_BACKTRACE: 1

jobs:
  build-linux-x86_64-gnu:
    executor: rust-executor
    environment:
      SCCACHE_DIR: "/tmp/sccache"
    steps:
      - checkout
      - restore_cache:
          keys:
            - sccache-v1-{{ checksum "Cargo.lock" }}
            - sccache-v1-
      - run:
          name: Install sccache
          command: |
            cargo install sccache
            echo 'export RUSTC_WRAPPER=$(which sccache)' >> $BASH_ENV
            source $BASH_ENV
      - run:
          name: Set up cross-compilation for x86_64-unknown-linux-gnu
          command: rustup target add x86_64-unknown-linux-gnu
      - run:
          name: Build for x86_64-unknown-linux-gnu
          command: cargo build --workspace --all-targets --release --target x86_64-unknown-linux-gnu
      - save_cache:
          key: sccache-v1-{{ checksum "Cargo.lock" }}
          paths:
            - $CARGO_HOME/registry
            - $CARGO_HOME/git
            - /tmp/sccache
      - store_artifacts:
          path: target/x86_64-unknown-linux-gnu/release/geoetl-cli
          destination: geoetl-cli-x86_64-unknown-linux-gnu

  build-linux-aarch64-gnu:
    executor: rust-executor
    environment:
      SCCACHE_DIR: "/tmp/sccache"
      CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: "aarch64-linux-gnu-gcc"
    steps:
      - checkout
      - restore_cache:
          keys:
            - apt-cache-aarch64-v1
      - run:
          name: Install aarch64-linux-gnu-gcc
          command: |
            apt-get update
            apt-get install -y gcc-aarch64-linux-gnu
      - save_cache:
          key: apt-cache-aarch64-v1
          paths:
            - /var/cache/apt
      - restore_cache:
          keys:
            - sccache-v1-{{ checksum "Cargo.lock" }}
            - sccache-v1-
      - run:
          name: Install sccache
          command: |
            cargo install sccache
            echo 'export RUSTC_WRAPPER=$(which sccache)' >> $BASH_ENV
            source $BASH_ENV
      - run:
          name: Set up cross-compilation for aarch64-unknown-linux-gnu
          command: rustup target add aarch64-unknown-linux-gnu
      - run:
          name: Build for aarch64-unknown-linux-gnu
          command: cargo build --workspace --all-targets --release --target aarch64-unknown-linux-gnu
      - save_cache:
          key: sccache-v1-{{ checksum "Cargo.lock" }}
          paths:
            - $CARGO_HOME/registry
            - $CARGO_HOME/git
            - /tmp/sccache
      - store_artifacts:
          path: target/aarch64-unknown-linux-gnu/release/geoetl-cli
          destination: geoetl-cli-aarch64-unknown-linux-gnu

  build-linux-x86_64-musl:
    executor: rust-executor
    environment:
      SCCACHE_DIR: "/tmp/sccache"
    steps:
      - checkout
      - restore_cache:
          keys:
            - apt-cache-musl-v1
      - run:
          name: Install musl-tools
          command: |
            apt-get update
            apt-get install -y musl-tools
      - save_cache:
          key: apt-cache-musl-v1
          paths:
            - /var/cache/apt
      - restore_cache:
          keys:
            - sccache-v1-{{ checksum "Cargo.lock" }}
            - sccache-v1-
      - run:
          name: Install sccache
          command: |
            cargo install sccache
            echo 'export RUSTC_WRAPPER=$(which sccache)' >> $BASH_ENV
            source $BASH_ENV
      - run:
          name: Set up cross-compilation for x86_64-unknown-linux-musl
          command: rustup target add x86_64-unknown-linux-musl
      - run:
          name: Build for x86_64-unknown-linux-musl
          command: cargo build --workspace --all-targets --release --target x86_64-unknown-linux-musl
      - save_cache:
          key: sccache-v1-{{ checksum "Cargo.lock" }}
          paths:
            - $CARGO_HOME/registry
            - $CARGO_HOME/git
            - /tmp/sccache
      - store_artifacts:
          path: target/x86_64-unknown-linux-musl/release/geoetl-cli
          destination: geoetl-cli-x86_64-unknown-linux-musl

  build-macos-aarch64:
    macos:
      xcode: "15.4.0"
    resource_class: macos.m1.medium.gen1
    steps:
      - checkout
      - run:
          name: Install Rust
          command: |
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
            echo 'source $HOME/.cargo/env' >> $BASH_ENV
      - run:
          name: Build for aarch64-apple-darwin
          command: cargo build --workspace --all-targets --release --target aarch64-apple-darwin
      - store_artifacts:
          path: target/aarch64-apple-darwin/release/geoetl-cli
          destination: geoetl-cli-aarch64-apple-darwin

  build-windows-x86_64-msvc:
    executor: win/default
    steps:
      - checkout
      - run:
          name: Install Rust
          command: |
            Invoke-WebRequest -Uri https://win.rustup.rs/ -OutFile rustup-init.exe
            .\rustup-init.exe -y --default-toolchain stable --profile minimal
            Add-Content -Path $Profile.CurrentUserAllHosts -Value '$env:PATH = "C:\Users\circleci\.cargo\bin;$env:PATH"'
          shell: powershell.exe
      - run:
          name: Build for x86_64-pc-windows-msvc
          command: cargo build --workspace --all-targets --release --target x86_64-pc-windows-msvc
          shell: powershell.exe
      - store_artifacts:
          path: target/x86_64-pc-windows-msvc/release/geoetl-cli.exe
          destination: geoetl-cli-x86_64-pc-windows-msvc.exe

workflows:
  release-pipeline:
    jobs:
      - build-linux-x86_64-gnu
      - build-linux-aarch64-gnu
      - build-linux-x86_64-musl
      - build-macos-aarch64
      - build-windows-x86_64-msvc
