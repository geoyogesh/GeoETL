version: 2.1

# Define reusable executors
executors:
  rust-executor:
    docker:
      - image: rust:1.90.0
    working_directory: ~/project
    environment:
      CARGO_TERM_COLOR: always
      RUST_BACKTRACE: 1

# Define jobs
jobs:
  # Format check
  format:
    executor: rust-executor
    steps:
      - checkout
      - restore_cache:
          keys:
            - cargo-cache-v1-{{ checksum "Cargo.lock" }}
            - cargo-cache-v1-
      - run:
          name: Install rustfmt
          command: rustup component add rustfmt
      - run:
          name: Check formatting
          command: cargo fmt --all -- --check
      - save_cache:
          key: cargo-cache-v1-{{ checksum "Cargo.lock" }}
          paths:
            - ~/.cargo/registry
            - ~/.cargo/git
            - target

  # Lint with clippy
  lint:
    executor: rust-executor
    steps:
      - checkout
      - restore_cache:
          keys:
            - cargo-cache-v1-{{ checksum "Cargo.lock" }}
            - cargo-cache-v1-
      - run:
          name: Install clippy
          command: rustup component add clippy
      - run:
          name: Run clippy
          command: cargo clippy --workspace --all-targets -- -D warnings -D clippy::pedantic
      - save_cache:
          key: cargo-cache-v1-{{ checksum "Cargo.lock" }}
          paths:
            - ~/.cargo/registry
            - ~/.cargo/git
            - target

  # Build
  build:
    executor: rust-executor
    steps:
      - checkout
      - restore_cache:
          keys:
            - cargo-cache-v1-{{ checksum "Cargo.lock" }}
            - cargo-cache-v1-
      - run:
          name: Build workspace
          command: cargo build --workspace --all-targets --release
      - save_cache:
          key: cargo-cache-v1-{{ checksum "Cargo.lock" }}
          paths:
            - ~/.cargo/registry
            - ~/.cargo/git
            - target
      - persist_to_workspace:
          root: .
          paths:
            - target/release/*

  # Run tests
  test:
    executor: rust-executor
    steps:
      - checkout
      - restore_cache:
          keys:
            - cargo-cache-v1-{{ checksum "Cargo.lock" }}
            - cargo-cache-v1-
      - run:
          name: Run tests
          command: cargo test --workspace --all-targets
      - run:
          name: Create test results directory
          command: mkdir -p test-results
          when: always
      - store_test_results:
          path: test-results
      - save_cache:
          key: cargo-cache-v1-{{ checksum "Cargo.lock" }}
          paths:
            - ~/.cargo/registry
            - ~/.cargo/git
            - target

  # Code coverage
  coverage:
    executor: rust-executor
    steps:
      - checkout
      - restore_cache:
          keys:
            - cargo-cache-v1-{{ checksum "Cargo.lock" }}
            - cargo-cache-v1-
      - run:
          name: Install cargo-llvm-cov
          command: cargo install cargo-llvm-cov
      - run:
          name: Generate coverage report
          command: cargo llvm-cov --workspace --all-targets --fail-under-lines 80 --lcov --output-path lcov.info
      - run:
          name: Display coverage summary
          command: cargo llvm-cov --workspace --all-targets --summary-only
      - store_artifacts:
          path: lcov.info
          destination: coverage/lcov.info
      - save_cache:
          key: cargo-cache-v1-{{ checksum "Cargo.lock" }}
          paths:
            - ~/.cargo/registry
            - ~/.cargo/git
            - target

  # Security audit
  security:
    executor: rust-executor
    steps:
      - checkout
      - restore_cache:
          keys:
            - cargo-cache-v1-{{ checksum "Cargo.lock" }}
            - cargo-cache-v1-
      - run:
          name: Install security tools if not cached
          command: |
            if ! command -v cargo-audit &> /dev/null; then
              echo "Installing cargo-audit"
              cargo install cargo-audit
            else
              echo "cargo-audit is already cached"
            fi
            if ! command -v cargo-deny &> /dev/null; then
              echo "Installing cargo-deny"
              cargo install cargo-deny
            else
              echo "cargo-deny is already cached"
            fi
      - run:
          name: Run security audit
          command: cargo audit
      - run:
          name: Run cargo-deny checks
          command: cargo deny check
      - save_cache:
          key: cargo-cache-v1-{{ checksum "Cargo.lock" }}
          paths:
            - ~/.cargo/registry
            - ~/.cargo/git
            - ~/.cargo/bin
            - target

# Define workflows
workflows:
  ci-pipeline:
    jobs:
      - format
      - lint
      - security
      - build
      - test:
          requires:
            - build
      - coverage:
          requires:
            - test
